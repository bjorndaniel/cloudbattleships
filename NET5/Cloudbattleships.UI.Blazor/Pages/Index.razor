@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient HttpClient
@inject IConfiguration Configuration

<main role="main" class="justify-content-center text-center mt-auto">
    <div class="row align-self-top justify-content-center text-center">
        <div class="col">
            <h2>Blazorships - a battleships implementation</h2>
            <p>Built using Blazor, Cosmos Db, Azure Functions and Azure SignalR</p>
        </div>
    </div>
    @if (_isLoading)
    {

        <div class="container mt-auto mb-auto">
            <div class="row css-load-parent">
                <div class="col text-center my-auto">
                    <div class="cssload-loader-inner">
                        <div class="cssload-cssload-loader-line-wrap-wrap">
                            <div class="cssload-loader-line-wrap"></div>
                        </div>
                        <div class="cssload-cssload-loader-line-wrap-wrap">
                            <div class="cssload-loader-line-wrap"></div>
                        </div>
                        <div class="cssload-cssload-loader-line-wrap-wrap">
                            <div class="cssload-loader-line-wrap"></div>
                        </div>
                        <div class="cssload-cssload-loader-line-wrap-wrap">
                            <div class="cssload-loader-line-wrap"></div>
                        </div>
                        <div class="cssload-cssload-loader-line-wrap-wrap">
                            <div class="cssload-loader-line-wrap"></div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col text-center">
                    <h3>@_loadingMessage</h3>
                </div>
            </div>
        </div>
    }
    else
    {
        @if (_currentGame != null)
        {
            if (_currentGame.SpotAvailable)
            {
                <h3>Waiting for second player</h3>
            }
            <div class="row">
                <div class="col text-center">
                    <h4>Your ships</h4>
                    <table class="ship-board">
                        @for (int i = 1; i <= 10; i++)
                        {
                            <tr>
                                @for (int j = 1; j <= 10; j++)
                                {
                                    var panel = _me.GameBoard.GetPanel(i, j);
                                    <td class="ship-tile @((panel?.IsHit??false) ? "red" : "")">
                                        <div style="width:35px;height:35px;">
                                            @(panel?.Status)
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                </div>
                <div class="col text-center">
                    <h4>Firing board</h4>
                    <table class="ship-board">
                        @for (int i = 1; i <= 10; i++)
                        {
                            <tr>
                                @for (int j = 1; j <= 10; j++)
                                {
                                    var square = new Panel(i, j);
                                    <td class="ship-tile @(_me.FiringBoard.GetPanel(i ,j)?.Status == "X" ? "green" : "")">
                                        <div style="width:35px;height:35px;" class="@((_selectedRow == i && _selectedColumn == j) ? "yellow" : "")"
                             @onclick="@(() => SelectFiringSquare(square))">
                                            @_me.FiringBoard.GetPanel(i,j)?.Status
                                        </div>
                                    </td>
                                }
                            </tr>
                        }
                    </table>
                </div>
            </div>
        }
        else
        {
            <div class="row justify-content-center  ">
                <div class="col-6 offset-3 mx-auto">
                    <form>
                        <div class="form-group">
                            <input type="text" class="form-control" placeholder="Username" @bind="@_userName" @onfocusout="@((e) => _startDisabled = string.IsNullOrEmpty(_userName))" />
                        </div>
                        <button type="button" class="btn btn-primary mb-2" disabled="@_startDisabled" @onclick=@StartGame>Play game</button>
                        <small class="form-text text-muted-app">Type a username and click Play game to join a game if one exists or create a new one and wait for opponent</small>

                        @*   <input type="hidden" bind="@Player.Id" id="playerId" />
                            <input type="hidden" bind="@CurrentGame.id" id="gameId" />
                            <input type="hidden" bind="@SelectedRow" id="hfSelectedRow" />
                            <input type="hidden" bind="@SelectedColumn" id="hfSelectedColumn" />
                            <input type="hidden" bind="@ClientId" id="hfClientId" />*@
                    </form>
                </div>
            </div>
        }
    }

    @* <h1>@_hubConnection.State</h1>

        <div class="form-group">
        <label>
        User:
        <input @bind="_userInput" />
        </label>
        </div>
        <div class="form-group">
        <label>
        Message:
        <input @bind="_messageInput" size="50" />
        </label>
        </div>
        <button @onclick="SendAsync" disabled="@(!IsConnected)">Send</button>

        <hr>

        <ul id="messagesList">
        @foreach (var message in messages)
        {
        <li>@message.Name: @message.Message</li>
        }
        </ul>*@
    @*<p>Server connection state: @_hubConnection.State</p>*@
</main>
@code {
    private HubConnection? _hubConnection;
    private string _userName = "";
    private string _chatMessage = "";
    private string _functionsUrl = "";
    private Game? _currentGame;
    private Player _me = new Player();
    private bool _startDisabled = true;
    private List<ChatMessage> messages = new List<ChatMessage>();
    private bool _isLoading;
    private string _loadingMessage = "";
    private int _selectedRow;
    private int _selectedColumn;
    protected override void OnInitialized()
    {
        _functionsUrl = Configuration["FunctionsApi"];
        //_hubConnection = new HubConnectionBuilder()
        //    .WithUrl($"{_functionsUrl}/api/")
        //    .Build();
        //_hubConnection.On<ChatMessage>("newMessage", (clientMessage) =>
        //{
        //    messages.Add(clientMessage);
        //    StateHasChanged();
        //});
        //await _hubConnection.StartAsync();
    }

    private async Task SendAsync()
    {
        var msg = new ChatMessage
        {
            Name = _userName,
            Message = _chatMessage
        };
        await HttpClient.PostAsJsonAsync($"{_functionsUrl}/api/messages", msg);
        _chatMessage = string.Empty;
        StateHasChanged();
    }

    private async Task StartGame()
    {
        _isLoading = true;
        _loadingMessage = "Connecting to server...";
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl($"{_functionsUrl}/api/")
                .Build();
            _hubConnection.On<Game>("gameUpdated", async (game) =>
            {
                if (game.Id == _currentGame?.Id)
                {
                    _currentGame = game;
                    _isLoading = false;
                    await InvokeAsync(StateHasChanged);
                }
            });
            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e.ToString());
        }

        var count = 0;
        while (_hubConnection?.State == HubConnectionState.Connecting)
        {
            await Task.Delay(500);
            count++;
            if (count > 10)
            {
                break;
            }
        }
        if (_hubConnection?.State != HubConnectionState.Connected)
        {
            _loadingMessage = "Could not connect to server. Please reload the page!";
        }
        _loadingMessage = "Searching for game...";
        _me = new Player { Name = _userName };
        var content = new StringContent(JsonSerializer.Serialize(_me), System.Text.UTF8Encoding.UTF8, "application/json");
        try
        {
            var response = await HttpClient.PostAsync($"{_functionsUrl}/api/initGame", content);
            if (response.IsSuccessStatusCode)
            {
                _currentGame = await JsonSerializer.DeserializeAsync<Game>(await response.Content.ReadAsStreamAsync());
                _me = _currentGame?.GetPlayer(_me.Id) ?? _me;
                _isLoading = false;
                _loadingMessage = "";
            }
            else
            {
                _loadingMessage = "Could not find a game. Please reload the page and try again!";
            }
        }
        catch (Exception e)
        {
            _loadingMessage = "Could not find a game. Please reload the page and try again!";
            Console.WriteLine(e.ToString());
        }
    }

    private async Task SelectFiringSquare(Panel selectedSquare)
    {
        _isLoading = true;
        _loadingMessage = $"Firing at row:{(selectedSquare.Row + 1)} column: {(selectedSquare.Column +1)}";
        Console.WriteLine($"Clicked on {selectedSquare.Row} {selectedSquare.Column}");
        var message = new FireMessage
        {
            GameId = _currentGame!.Id,
            PlayerId = _me.Id,
            Row = selectedSquare.Row,
            Column = selectedSquare.Column
        };
        var content = new StringContent(JsonSerializer.Serialize(message), System.Text.UTF8Encoding.UTF8, "application/json");
        await HttpClient.PostAsync($"{_functionsUrl}/api/fire", content);
        //var panel = _me.FiringBoard.GetPanel(selectedSquare.Row, selectedSquare.Column);
        //if (panel == null || panel.Status != " ")
        //{
        //    return;
        //}
        //_selectedRow = selectedSquare.Row;
        //_selectedColumn = selectedSquare.Column;
    }
}