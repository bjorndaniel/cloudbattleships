@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject IConfiguration Configuration
<h1>@_hubConnection.State</h1>

<div class="form-group">
    <label>
        User:
        <input @bind="_userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="_messageInput" size="50" />
    </label>
</div>
<button @onclick="SendAsync" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message.Name: @message.Message</li>
    }
</ul>

@code {
    private HubConnection _hubConnection;
    private List<ClientMessage> messages = new List<ClientMessage>();
    private string _userInput;
    private string _messageInput;
    private readonly HttpClient _httpClient = new HttpClient();
    private string _functionsUrl;
    public bool IsConnected => _hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        _functionsUrl = Configuration["FunctionsApi"];
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_functionsUrl)
            .Build();
        _hubConnection.On<ClientMessage>("clientMessage", (clientMessage) =>
        {
            messages.Add(clientMessage);
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
    }

    async Task SendAsync()
    {
        var msg = new ClientMessage
        {
            Name = _userInput,
            Message = _messageInput
        };
        await _httpClient.PostAsJsonAsync($"{_functionsUrl}/messages", msg);
        _messageInput = string.Empty;
        StateHasChanged();
    }

    public class ClientMessage
    {
        public string Name { get; set; }
        public string Message { get; set; }
    }
}